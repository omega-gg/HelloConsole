#--------------------------------------------------------------------------------------------------
# Windows
#--------------------------------------------------------------------------------------------------

jobs:
#- job: win32_qt4
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh 3rdparty.sh win32
#      sh configure.sh qt4 win32 sky
#      cd ../Sky
#      sh build.sh qt4 win32 tools
#      cd ../s
#      sh build.sh qt4 win32 deploy
#      cd deploy
#      7z a ../HelloConsole.zip *
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-win32-qt4

#- job: win32_qt5
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh 3rdparty.sh win32
#      sh configure.sh qt5 win32 sky
#      cd ../Sky
#      sh build.sh qt5 win32 tools
#      cd ../s
#      sh build.sh qt5 win32 deploy
#      cd deploy
#      7z a ../HelloConsole.zip *
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-win32-qt5

##--------------------------------------------------------------------------------------------------

#- job: win64_qt5
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh 3rdparty.sh win64
#      sh configure.sh qt5 win64 sky
#      cd ../Sky
#      sh build.sh qt5 win64 tools
#      cd ../s
#      sh build.sh qt5 win64 deploy
#      cd deploy
#      7z a ../HelloConsole.zip *
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-win64-qt5

##--------------------------------------------------------------------------------------------------

- job: win32_msvc_qt5
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh 3rdparty.sh win32-msvc
      sh configure.sh qt5 win32-msvc sky
      cd ../Sky
      sh build.sh qt5 win32-msvc tools
      cd ../s
      sh build.sh qt5 win32-msvc deploy
      cd deploy
      7z a ../HelloConsole.zip *
  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
    artifact: HelloConsole-win32-msvc-qt5

#- job: win64_msvc_qt5
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh 3rdparty.sh win64-msvc
#      sh configure.sh qt5 win64-msvc sky
#      cd ../Sky
#      sh build.sh qt5 win64-msvc tools
#      cd ../s
#      sh build.sh qt5 win64-msvc deploy
#      cd deploy
#      7z a ../HelloConsole.zip *
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-win64-msvc-qt5

##--------------------------------------------------------------------------------------------------
## macOS
##--------------------------------------------------------------------------------------------------

#- job: macOS_qt5
#  pool:
#    vmImage: "macOS-latest"
#  steps:
#  - bash: |
#      sh 3rdparty.sh macOS
#      sh configure.sh qt5 macOS sky
#      cd ../Sky
#      sh build.sh qt5 macOS tools
#      cd ../s
#      sh build.sh qt5 macOS deploy
#      cd deploy
#      zip -rq ../HelloConsole.zip *
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-macOS-qt5

##--------------------------------------------------------------------------------------------------
## Linux
##--------------------------------------------------------------------------------------------------

#- job: linux32_qt4
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/HelloConsole i386/ubuntu:18.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /HelloConsole;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip git;
#                                     sh 3rdparty.sh linux;
#                                     sh configure.sh qt4 linux sky;
#                                     cd ../Sky;
#                                     sh build.sh qt4 linux tools;
#                                     cd ../HelloConsole;
#                                     sh build.sh qt4 linux deploy;
#                                     cd deploy;
#                                     zip -rq ../HelloConsole.zip *"
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-linux32-qt4

#- job: linux32_qt5
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/HelloConsole i386/ubuntu:18.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /HelloConsole;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip git;
#                                     sh 3rdparty.sh linux;
#                                     sh configure.sh qt5 linux sky;
#                                     cd ../Sky;
#                                     sh build.sh qt5 linux tools;
#                                     cd ../HelloConsole;
#                                     sh build.sh qt5 linux deploy;
#                                     cd deploy;
#                                     zip -rq ../HelloConsole.zip *"
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-linux32-qt5

##--------------------------------------------------------------------------------------------------

#- job: linux64_qt4
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/HelloConsole amd64/ubuntu:18.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /HelloConsole;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip git;
#                                     sh 3rdparty.sh linux;
#                                     sh configure.sh qt4 linux sky;
#                                     cd ../Sky;
#                                     sh build.sh qt4 linux tools;
#                                     cd ../HelloConsole;
#                                     sh build.sh qt4 linux deploy;
#                                     cd deploy;
#                                     zip -rq ../HelloConsole.zip *"
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-linux64-qt4

#- job: linux64_qt5
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/HelloConsole amd64/ubuntu:18.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /HelloConsole;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip git;
#                                     sh 3rdparty.sh linux;
#                                     sh configure.sh qt5 linux sky;
#                                     cd ../Sky;
#                                     sh build.sh qt5 linux tools;
#                                     cd ../HelloConsole;
#                                     sh build.sh qt5 linux deploy;
#                                     cd deploy;
#                                     zip -rq ../HelloConsole.zip *"
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-linux64-qt5

##--------------------------------------------------------------------------------------------------
## Android
##--------------------------------------------------------------------------------------------------

#- job: android_qt5
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/HelloConsole amd64/ubuntu:18.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /HelloConsole;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip unzip git;
#                                     sh 3rdparty.sh linux;
#                                     sh 3rdparty.sh android;
#                                     sh configure.sh qt5 android sky;
#                                     cd ../Sky;
#                                     sh build.sh qt5 linux tools;
#                                     cd ../HelloConsole;
#                                     sh build.sh qt5 android deploy;
#                                     cd deploy;
#                                     zip -rq ../HelloConsole.zip *"
#  - publish: $(System.DefaultWorkingDirectory)/HelloConsole.zip
#    artifact: HelloConsole-android-qt5
